<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.douzon.blooming.customer.repo.CustomerRepository">
    <select id="customerCodeCheck" parameterType="java.lang.String" resultType="java.lang.Boolean">
        SELECT COUNT(*)
        FROM project.customer
        WHERE customer_code = #{customerCode};
    </select>

    <insert id="insertCustomer" parameterType="com.douzon.blooming.customer.dto.request.RequestCustomerDto">
        INSERT INTO project.customer(customer_code, customer_name, customer_tel, ceo, sector)
        VALUES (#{customerCode}, #{customerName}, #{customerTel}, #{ceo}, #{sector})
    </insert>

    <select id="findCustomer" parameterType="java.lang.Long" resultType="com.douzon.blooming.customer.dto.response.ResponseCustomerDto">
        SELECT *
        FROM project.customer
        WHERE customer_no = #{customerNo}
        AND hide = 0;
    </select>

    <select id="getCountCustomers" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM project.customer
        <where>
            <choose>
                <when test="dto.customerName != ''">
                    MATCH (customer_name) AGAINST(CONCAT(#{dto.customerName},'*') IN BOOLEAN MODE)
                </when>
            </choose>
            <choose>
                <when test="dto.sector != ''">
                    <choose>
                        <when test="dto.customerName == ''">
                            MATCH (sector) AGAINST(CONCAT(#{dto.sector},'*') IN BOOLEAN MODE)
                        </when>
                        <otherwise>
                            AND MATCH (customer_name) AGAINST(CONCAT(#{dto.sector},'*') IN BOOLEAN MODE)
                        </otherwise>
                    </choose>
                </when>
            </choose>
            <choose>
                <when test="dto.customerName == '' and dto.sector == ''">
                    customer_code LIKE CONCAT('%', #{dto.customerCode}, '%')
                </when>
                <otherwise>
                    AND customer_code LIKE CONCAT('%', #{dto.customerCode}, '%')
                </otherwise>
            </choose>
        AND hide = 0
        </where>
    </select>

    <select id="findCustomers" parameterType="com.douzon.blooming.customer.dto.request.CustomerSearchDto" resultType="com.douzon.blooming.customer.dto.response.ResponseCustomerDto">
        SELECT customer_no, customer_code, customer_name, customer_tel, ceo, sector
        FROM project.customer
        <where>
            <choose>
                <when test="dto.customerName != ''">
                    MATCH (customer_name) AGAINST(CONCAT(#{dto.customerName},'*') IN BOOLEAN MODE)
                </when>
            </choose>
            <choose>
                <when test="dto.sector != ''">
                    <choose>
                        <when test="dto.customerName == ''">
                            MATCH (sector) AGAINST(CONCAT(#{dto.sector},'*') IN BOOLEAN MODE)
                        </when>
                        <otherwise>
                            AND MATCH (customer_name) AGAINST(CONCAT(#{dto.sector},'*') IN BOOLEAN MODE)
                        </otherwise>
                    </choose>
                </when>
            </choose>
            <choose>
                <when test="dto.customerName == '' and dto.sector == ''">
                    customer_code LIKE CONCAT('%', #{dto.customerCode}, '%')
                </when>
                <otherwise>
                    AND customer_code LIKE CONCAT('%', #{dto.customerCode}, '%')
                </otherwise>
            </choose>
            AND hide = 0
        </where>
        LIMIT #{start}, #{pageSize}
    </select>
  <select id="findManyTransactionCustomers"
          resultType="com.douzon.blooming.main.dto.MainPageCustomerDto">
        SELECT C.customer_no as customerNo,
            C.customer_name as customerName,
            COUNT(I.customer_no) AS count
        FROM project.customer as C
            LEFT JOIN project.instruction as I ON I.customer_no = C.customer_no
        GROUP BY C.customer_no, C.customer_name
        ORDER BY count DESC LIMIT 2;
  </select>

  <update id="updateCustomer">
        UPDATE project.customer
        SET customer_name = #{dto.customerName},
            customer_tel = #{dto.customerTel},
            ceo = #{dto.ceo}
        WHERE customer_no = #{customerNo}
        AND hide = 0
    </update>

    <update id="updateCustomerHide">
        UPDATE project.customer
        SET hide = 1
        WHERE customer_no = #{customerNo}
    </update>

</mapper>